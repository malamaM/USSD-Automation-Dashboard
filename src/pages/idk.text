import React, { useState, useEffect } from 'react';
import { Helmet } from 'react-helmet-async';
import axios from 'axios';
import { useTheme } from '@mui/material/styles';
import { Grid, Container, Typography, Button, Dialog, DialogTitle, DialogContent } from '@mui/material';
import Paper from '@mui/material/Paper';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TablePagination from '@mui/material/TablePagination';
import TableRow from '@mui/material/TableRow';
import TextField from '@mui/material/TextField';
import { AppWidgetSummary, AppWebsiteVisits, AppCurrentVisits } from '../sections/@dashboard/app';

const columns = [
  { id: 'appId', label: 'Application ID', minWidth: 100 },
  { id: 'custName', label: 'Customer Name', minWidth: 170 },
  { id: 'shortCode', label: 'Short Code', minWidth: 100 },
  { id: 'expiryDate', label: 'Expiry Date', minWidth: 120 },
  { id: 'licenseStatus', label: 'License Status', minWidth: 120 },
];

const createData = (appId, custName, shortCode, expiryDate, licenseStatus) => {
  return { appId, custName, shortCode, expiryDate, licenseStatus };
};

export default function DashboardAppPage() {
  const theme = useTheme();
  const [pendingApplicationsCount, setPendingApplicationsCount] = useState(0);
  const [AwaitingActionCount, setAwaitingActionCount] = useState(0);
  const [expiring, setexpiring] = useState(0);
  const [availableshortcodes, setavailableshortcodes] = useState(0);
  const [activeCount, setActiveCount] = useState(0);
  const [expiredCount, setexpiredCount] = useState(0);

  const [rows, setRows] = useState([]);
  const [filteredRows, setFilteredRows] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [selectedRow, setSelectedRow] = useState(null);
  const [open, setOpen] = useState(false);

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(+event.target.value);
    setPage(0);
  };

  const handleSearch = (event) => {
    const query = event.target.value.toLowerCase();
    setSearchQuery(query);

    const filtered = rows.filter(
      (row) =>
        row.appId.toLowerCase().includes(query) ||
        row.custName.toLowerCase().includes(query) ||
        row.shortCode.toLowerCase().includes(query) ||
        row.expiryDate.toLowerCase().includes(query) ||
        row.licenseStatus.toLowerCase().includes(query)
    );
    setFilteredRows(filtered);
    setPage(0);
  };

  useEffect(() => {
    const fetchApplications = async () => {
      try {
        const response = await axios.get('https://vulkantechnologylabs.com/api/alllicenses');
        const appData = response.data;

        // Transform appData into rows array
        const newRows = appData.map((data) =>
          createData(
            data.app_id,
            data.cust_name,
            data.short_code,
            data.expiry_date,
            data.license_status
          )
        );
        setRows(newRows);
        setFilteredRows(newRows);
      } catch (error) {
        console.error('Error fetching applications:', error);
      }
    };

    fetchApplications();
  }, []);

  const handleRowClick = (row) => {
    setSelectedRow(row);
    setOpen(true);
  };

  return (
    <fragment>
      <Helmet title="Dashboard: App" />
      <Container maxWidth="lg">
        <Grid container spacing={3}>
          <Grid item xs={12}>
            <Typography variant="h3" gutterBottom>
              Applications
            </Typography>
            <TextField
              label="Search"
              variant="outlined"
              value={searchQuery}
              onChange={handleSearch}
              fullWidth
              margin="normal"
            />
            <Paper sx={{ width: '100%', overflow: 'hidden' }}>
              <TableContainer sx={{ maxHeight: 440 }}>
                <Table stickyHeader aria-label="sticky table">
                  <TableHead>
                    <TableRow>
                      {columns.map((column) => (
                        <TableCell
                          key={column.id}
                          align={column.align}
                          style={{ minWidth: column.minWidth }}
                        >
                          {column.label}
                        </TableCell>
                      ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {(rowsPerPage > 0
                      ? filteredRows.slice(
                          page * rowsPerPage,
                          page * rowsPerPage + rowsPerPage
                        )
                      : filteredRows
                    ).map((row) => {
                      return (
                        <TableRow
                          hover
                          role="checkbox"
                          tabIndex={-1}
                          key={row.appId}
                          onClick={() => handleRowClick(row)}
                        >
                          <TableCell>{row.appId}</TableCell>
                          <TableCell>{row.custName}</TableCell>
                          <TableCell>{row.shortCode}</TableCell>
                          <TableCell>{row.expiryDate}</TableCell>
                          <TableCell>{row.licenseStatus}</TableCell>
                        </TableRow>
                      );
                    })}
                  </TableBody>
                </Table>
              </TableContainer>
              <TablePagination
                rowsPerPageOptions={[10, 25, 100]}
                component="div"
                count={filteredRows.length}
                rowsPerPage={rowsPerPage}
                page={page}
                onPageChange={handleChangePage}
                onRowsPerPageChange={handleChangeRowsPerPage}
              />
            </Paper>
          </Grid>
        </Grid>
      </Container>
      <Dialog open={open} onClose={() => setOpen(false)}>
        <DialogTitle>Row Details</DialogTitle>
        <DialogContent>
          {selectedRow && (
            <>
              <div>Application ID: {selectedRow.appId}</div>
              <div>Customer Name: {selectedRow.custName}</div>
              <div>Short Code: {selectedRow.shortCode}</div>
              <div>Expiry Date: {selectedRow.expiryDate}</div>
              <div>License Status: {selectedRow.licenseStatus}</div>
            </>
          )}
          <Button onClick={() => setOpen(false)}>Close</Button>
        </DialogContent>
      </Dialog>
    </fragment>
  );
}
